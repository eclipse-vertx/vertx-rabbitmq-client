= RabbitMQ Client for Vert.x

A Vert.x client allowing applications to interact with a RabbitMQ broker (AMQP 0.9.1) via a reactive API.

**This service is experimental and the APIs are likely to change before settling down.**

The client is a relatively thin wrapper around the standard Java RabbitMQ client, with most interactions wrapped in a call to executeBlocking.
There should not be many things that can be done with the standard Java RabbitMQ client that cannot be done with this Vertx client.
One exception is that this Vertx client only supports NIO.

== Getting Started

=== Maven

Add the following dependency to your maven project

[source,xml,subs="+attributes"]
----
<dependency>
  <groupId>io.vertx</groupId>
  <artifactId>vertx-rabbitmq-client</artifactId>
  <version>${maven.version}</version>
</dependency>
----

=== Gradle

Add the following dependency to your gradle project

[source,groovy,subs="+attributes"]
----
dependencies {
  compile 'io.vertx:vertx-rabbitmq-client:${maven.version}'
}
----

=== Create a connection

The object model of the Vertx client mirrors that of the Java RabbitMQ client - a Connection must be created and then this can be used to create multiple Channels.
Interactions with the broker take place over channels.

You can create a connection as follows using a full amqp uri:
[source,$lang]
----
{@link examples.RabbitMQExamples#createConnectionWithUri}
----

Or you can also specify individual parameters manually:
[source,$lang]
----
{@link examples.RabbitMQExamples#createConnectionWithManualParameters}
----

You can set multiples addresses to connect to a cluster;
[source,$lang]
----
{@link examples.RabbitMQExamples#createConnectionWithMultipleHost}
----

All connections and channels are created lazily and only actually attempt to connect to the server when they are actually used (or when specifically asked to as above).
Thus a more usual approach to connecting would look like:
[source,$lang]
----
{@link examples.RabbitMQExamples#createConnectionAndUseImmediately}
----

== Operations

The following are some examples of the operations supported by the RabbitMQService API.
Consult the javadoc/documentation for detailed information on all API methods.

=== Publish

Publish a message to a queue

[source,$lang]
----
{@link examples.RabbitMQExamples#basicPublish}
----

=== Consume

Set up a consumer to receive messages from a queue.

[source,$lang]
----
{@link examples.RabbitMQExamples#basicConsume}
----

=== Reliable Publishing

////
// === Recovery and Reconnections
// 
// There are two, separate and incompatible, mechanisms for handling reconnections in the RabbitMQClient:
// 
// * Java RabbitMQ client library auto recovery;
// * RabbitMQClient restarts.
// 
// Neither mechanism is enabled by default.
// 
// The reconnections provided by the Java RabbitMQ client library do not work in all situations (if the connection to the server disconnects nicely the client will shut down and not recover).
// ----
// [source, java]
// In order to use the Java RabbitMQ client library auto recovery it is necessary to both enable it and disable the RabbitMQClient library reconnect attempts:
// RabbitMQOptions options = new RabbitMQOptions();
// options.setAutomaticRecoveryEnabled(true);
// options.setReconnectAttempts(0);
// ----
// The client library will also attempt topology recovery as detailed in its documentation (this is enabled by default in the library and is not exposed in the RabbitMQClientOptions).
// 
// 
// 
// Alternatively the RabbitMQClient may be configured to retry connecting to the RabbitMQ server whenever there is a connection problem.
// The failure of a connection could be caused by a transient network failure (where the client would probably connect back to the same RabbitMQ server) or it could be caused by a failover scenario.
// This approach is more brutal than that followed by the client library - the RabbitMQClient restarts work by closing the connections when the client library reports a problem and then repeatedly trying to reconnect from scratch.
// 
// The reconnection policy can be configured by setting the {@link io.vertx.core.net.NetClientOptions#setReconnectInterval(long)} and
// {@link io.vertx.core.net.NetClientOptions#setReconnectAttempts(int)} properties in the configuration:
// [source, java]
// ----
// RabbitMQOptions options = new RabbitMQOptions();
// options.setAutomaticRecoveryEnabled(false);
// options.setReconnectAttempts(Integer.MAX_VALUE);
// options.setReconnectInterval(500);
// ----
// 
// The RabbitMQClient reconnections do not feature any form of _automatic_ topology recovery.
// This can lead to a race condition where messages are sent before the topology on the server is ready (i.e. before exchanges and queues have been created/bound).
// To provide an opportunity to create these objects before the connection is considered ready the RabbitMQClient provides the ConnectionEstablishedCallback.
// The ConnectionEstablishedCallback can be used to carry out any operations on the RabbitMQClient before other users (including the RabbitMQConsumer and RabbitMQPublisher) are able to access it.
// 
// [source,$lang]
// ----
// {@link examples.RabbitMQExamples#connectionEstablishedCallback}
// ----
// 
// If a RabbitMQConsumer is listening for messages on an auto-delete server-named queue and the broker restarts the queue will have been removed by the time the client reconnects.
// In this instance it is necessary to both recreate the queue and set the new queue name on the RabbitMQConsumer.
// 
// [source,$lang]
// ----
// {@link examples.RabbitMQExamples#connectionEstablishedCallbackForServerNamedAutoDeleteQueue}
// ----
// 
// ==== Enabling SSL/TLS on the client
// 
// The RabbitMQClient can easily configured to use SSL. 
// [source,$lang]
// ----
// RabbitMQOptions options = new RabbitMQOptions()
//   .setSsl(true);
// ----
// 
// ===== Client trust configuration
// 
// If {@link io.vertx.core.net.ClientOptionsBase#setTrustAll trustAll} is set to true, the client will trust all server certificates. 
// The connection will still be encrypted but is then vulnerable to 'man in the middle' attacks.
// *Greatbadness*, Do not use this option in production! Default value is false.
// 
// [source,$lang]
// ----
// RabbitMQOptions options = new RabbitMQOptions()
//   .setSsl(true)
//   .setTrustAll(true));
// ----
// 
// If {@link io.vertx.core.net.ClientOptionsBase#setTrustAll trustAll} is set to false, proper server authentication will takes place. Three main options are available. 
// 
//  - Your default truststore already "trusts" the server, in which case all is fine +
//  - You start the java process with -Djavax.net.ssl.trustStore=xxx.jks specifying the custom trust store +
//  - You supply a custom trust store via RabbitMQOptions
// 
// ===== JKS trust store option
// [source,$lang]
// ----
// RabbitMQOptions options = new RabbitMQOptions()
//   .setSsl(true)
//   .setTrustOptions(new JksOptions()
//     .setPath("/path/myKeyStore.jks")
//     .setPassword("myKeyStorePassword"));
// ----
// ===== p12/pfx trust store option
// [source,$lang]
// ----
// RabbitMQOptions options = new RabbitMQOptions()
//   .setSsl(true)
//   .setPfxTrustOptions(
//     new PfxOptions().
//       setPath("/path/myKeyStore.p12").
//       setPassword("myKeyStorePassword"));
// ----
// ===== PEM trust option
// [source,$lang]
// ----
// RabbitMQOptions options = new RabbitMQOptions()
//   .setSsl(true)
//   .setPemTrustOptions(
//     new PemTrustOptions().
//       addCertPath("/path/ca-cert.pem"));
// ----
// 
// 
// === Declare exchange with additional config
// 
// You can pass additional config parameters to RabbitMQ's exchangeDeclare method
// 
// [source, $lang]
// ----
// {@link examples.RabbitMQExamples#exchangeDeclareWithConfig(io.vertx.rabbitmq.RabbitMQClient)}
// ----
// 
// === Declare queue with additional config
// 
// You can pass additional config parameters to RabbitMQs queueDeclare method
// 
// [source, $lang]
// ----
// {@link examples.RabbitMQExamples#queueDeclareWithConfig(io.vertx.rabbitmq.RabbitMQClient)}
// ----
// 
// == Operations
// 
// The following are some examples of the operations supported by the RabbitMQService API.
// Consult the javadoc/documentation for detailed information on all API methods.
// 
// === Publish
// 
// Publish a message to a queue
// 
// [source,$lang]
// ----
// {@link examples.RabbitMQExamples#basicPublish}
// ----
// 
// === Publish with confirm
// 
// Publish a message to a queue and confirm the broker acknowledged it.
// 
// [source,$lang]
// ----
// {@link examples.RabbitMQExamples#basicPublishWithConfirm}
// ----
// 
// === Reliable Message Publishing
// 
// In order to reliably publish messages to RabbitMQ it is necessary to handle confirmations that each message has been accepted by the server.
// The simplest approach to confirmations is to use the basicPublishWithConfirm approach, above, which synchronously confirms each message when it is sent - blocking the publishing channel until the confirmation is received.
// 
// In order to achieve greater throughput RabbitMQ provides asynchronous confirmations.
// The asynchronous confirmations can confirm multiple messages in one go, so it is necessary for the client to track all messages in the order that they were published.
// Also, until messages are confirmed by the server it may be necessary to resend them, so they must be retained by the client.
// 
// The RabbitMQPublisher class implements a standard approach to handling asynchronous confirmations, avoiding much of the boiler plate code that would otherwise be required.
// 
// The RabbitMQPublisher works by:
// * Adding all sent messages to an internal queue.
// * Sending messages from the queue when it is able, keeping track of these messages pending acknowledgement in a separate queue.
// * Handling asynchronous confirmations from RabbitMQ, removing messages from the pendingAck queue once they are confirmed.
// * Notifying the caller for each message that is confirmed (this is always a single message at a time, not the bulk confirmation used by RabbitMQ).
// 
// [source,$lang]
// ----
// {@link examples.RabbitMQExamples#rabbitMqPublisher}
// ----
// 
// 
// Delivery Tags
// 
// This section is an implementation detail that is useful for anyone that wants to implement their own alternative to RabbitMQPublisher.
// 
// For the RabbitMQPublisher to work it has to know the delivery tag that RabbitMQ will use for each message published.
// The confirmations from RabbitMQ can arrive at the client before the call to basicPublish has completed, so it is not possible to identify the delivery tag via anything returned by basicPublish if asynchronous confirmations are being used.
// For this reason it is necessary for the RabbitMQClient to tell the RabbitMQPublisher the delivery tag of each message via a separate callback that occurs in the call to RabbitMQClient::basicPublish before the message is actually sent on the network.
// It is also possible for the delivery tag of a single message to change (delivery tags are per-channel, so if the message is resent following a reconnection it will have a new delivery tag) - this means that we cannot use a Future to inform the client of the delivery tag.
// If the deliveryTagHandler is called more than once for a given message it is always safe to ignore the previous value - there can be only one valid delivery tag for a message at any time.
// 
// To capture the delivery tag one of the RabbitMqClient::basicPublishWithDeliveryTag methods should be used.
// [source, java]
// ----
//   void basicPublishWithDeliveryTag(String exchange, String routingKey, BasicProperties properties, Buffer body, Handler<Long> deliveryTagHandler, Handler<AsyncResult<Void>> resultHandler);
//   Future<Void> basicPublishWithDeliveryTag(String exchange, String routingKey, BasicProperties properties, Buffer body, @Nullable Handler<Long> deliveryTagHandler);
// ----
// These methods 
// 
// === Consume
// 
// Consume messages from a queue.
// 
// [source,$lang]
// ----
// // Create a stream of messages from a queue
// {@link examples.RabbitMQExamples#basicConsumer}
// ----
// 
// At any moment of time you can pause or resume the stream. When stream is paused you won't receive any message.
// 
// [source,$lang]
// ----
// {@link examples.RabbitMQExamples#pauseAndResumeConsumer(io.vertx.rabbitmq.RabbitMQConsumer)}
// ----
// 
// There are actually a set of options to specify when creating a consumption stream.
// 
// The `QueueOptions` lets you specify:
// 
//  * The size of internal queue with `setMaxInternalQueueSize`
//  * Should the stream keep more recent messages when queue size is exceed with `setKeepMostRecent`
// 
// [source,$lang]
// ----
// {@link examples.RabbitMQExamples#basicConsumerOptions}
// ----
// 
// When you want to stop consuming message from a queue, you can do:
// 
// [source,$lang]
// ----
// {@link examples.RabbitMQExamples#cancelConsumer}
// ----
// 
// You can get notified by the end handler when the queue won't process any more messages:
// 
// [source,$lang]
// ----
// {@link examples.RabbitMQExamples#endHandlerConsumer}
// ----
// 
// You can set the exception handler to be notified of any error that may occur when a message is processed:
// 
// [source,$lang]
// ----
// {@link examples.RabbitMQExamples#exceptionHandler}
// ----
// 
// And finally, you may want to retrive a related to the consumer tag:
// 
// [source,$lang]
// ----
// {@link examples.RabbitMQExamples#consumerTag}
// ----
// 
// === Get
// 
// Will get a message from a queue
// 
// [source,$lang]
// ----
// {@link examples.RabbitMQExamples#getMessage}
// ----
// 
// === Consume messages without auto-ack
// 
// [source,$lang]
// ----
// {@link examples.RabbitMQExamples#consumeWithManualAck}
// ----
// 
// 
// 
// == Running the tests
// 
// You will need to have RabbitMQ installed and running with default ports on localhost for this to work.
// 
////